@page "/CartPage"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using TicketHive_MadCats.Client.Cookies
@using TicketHive_MadCats.Shared.ViewModels;
@inject IJSRuntime JsRuntime

<h3>CartPage</h3>

@if(cart != null && cart.Count > 0)
{
	<div class="row text-center justify-content-center border-2 border-dark">

		@foreach (var kvp in cart)
		{
			<div>
				<span>Event @kvp.Key | @kvp.Value in cart | @totalPrice(Event, kvp.Value) </span>
				<br>
				<div>
					<button @onclick="@(async () => await RemoveFromCart(kvp.Key))">Remove</button>
					<button @onclick="@(async () => await AddToCart(kvp.Key))">Add</button>
				</div>
			</div>
		}

	</div>

	// ENDA RADEN SOM BEHÖVS FÖR ATT ÄNDRA VARUKORG
	@*cart = await cookieInt.UpdateCookieForSingleEvent(eventName, quantity)*@
}
else if (cart != null && cart.Count == 0)
{
	<span>Your cart is empty</span>
}
else if (cart == null)
{
	<span>Loading cart...</span>
}



@code {
	[Parameter]
	public int Id { get; set; }
	[Inject]
	public IJSRuntime jS { get; set; }
	[Inject]
	HttpClient codeClient { get; set; }

	public CookieInterpreter? cookieInt;
	public Dictionary<string, int>? cart = null;

	public EventViewModel? Event;



	protected override async Task OnParametersSetAsync()
	{
		cookieInt = new(jS);
		Event = await GetOneEvent();
		await StartReadingCookie();
	}


	public async Task StartReadingCookie()
	{
		Dictionary<string, int>? response = await cookieInt.ReadCookie();

		if(response != null)
		{
			cart = response;
		}
		else
		{

			cart = new();
		}
	}

	public async Task RemoveFromCart(string eventName)
	{
		int newQuantity = cart[eventName] - 1;
		cart = await cookieInt.UpdateCookieForSingleEvent(eventName, -1);
	}

	public async Task AddToCart(string eventName)
	{
		int newQuantity = cart[eventName] + 1;
		cart = await cookieInt.UpdateCookieForSingleEvent(eventName, 1);
	}

	public async Task<EventViewModel?> GetOneEvent()
	{
		var response = await codeClient.GetAsync($"api/Events/{Id}");
		var statusCode = response.StatusCode;
		if (statusCode == System.Net.HttpStatusCode.OK)
		{
			var responseBody = await response.Content.ReadAsStringAsync();
			EventViewModel? eventVM = JsonConvert.DeserializeObject<EventViewModel?>(responseBody);
			return eventVM;
		}
		return null;
	}

	public int totalPrice(EventViewModel? Event, int quantity)
	{
		if (Event == null)
			return 0;

		int totalPrice = Event.TicketPrice * quantity;
		return totalPrice;
	}

}
