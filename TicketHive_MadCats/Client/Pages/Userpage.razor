@page "/Userpage"
@using Newtonsoft.Json;
@using System.Security.Claims;
@using TicketHive_MadCats.Shared.Models;
@using TicketHive_MadCats.Shared.ViewModels;
@using TicketHive_MadCats.Shared.Statics
@inject AuthenticationStateProvider authStateProvider
@inject HttpClient client
@inject IJSRuntime jsRuntime

<h3>Userpage for @userName</h3>

<EditForm Model="@updateUserModel" OnValidSubmit="@UpdateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label>New Password:</label>
    <InputText type="password" @bind-Value="updateUserModel.NewPassword" />

    <label>New Country:</label>
    <InputText @bind-Value="updateUserModel.NewCountry" list="countryList" />
    <datalist id="countryList">
        @foreach (var kvp in countryAbbreviations)
        {
            <option value="@kvp.Key">@kvp.Value</option>
        }
    </datalist>

    <button type="submit">Update</button>
</EditForm>

<h3>@statusMessage</h3>


@code {
    [Inject]
    public AuthenticationStateProvider authenticationStateProvider { get; set; }

    [Inject]
    public HttpClient httpClient { get; set; }

    private string userName;
    private Dictionary<string, string> countryAbbreviations = CountriesAndCodes.getCountriesAndAbbreviations;
    private string statusMessage = "";
    private UpdateUserModel updateUserModel = new();

    private async Task UpdateUser()
    {
        string userToUpdate = JsonConvert.SerializeObject(updateUserModel);

        var response = await httpClient.PutAsJsonAsync("api/users", userToUpdate);
        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Nice job, you're from another country and your password's been changed. Or maybe not, if you didn't pick a new country or a new password, then nothing changed, right?";
        }
    }


    protected override async Task OnInitializedAsync()
    {
        //var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        //var user = state.User;
        ////userName = user.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
        //userName = user.Identity.Name;

        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        //userName = user.Identity?.Name ?? user.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
    }

    //ChatGPTs förslag på hur allt ska sparas.
    private async Task SaveChangesAsync()
    {
        // Get the new password and country values from the input fields
        var password = await jsRuntime.InvokeAsync<ElementReference>("eval", "document.getElementById('password').value");
        var country = await jsRuntime.InvokeAsync<ElementReference>("eval", "document.getElementById('country').value");

        // Call an API method to save the changes
        //Finns ingen api för users. Inte heller någon viewmodel. Vet inte riktigt hur jag ska få igenom att det ska sparas.
        //await injectedClient.PostAsJsonAsync("api/users/update", new UserUpdateViewModel
        //{
        //    Password = password,
        //    Country = country
        //});

        // Display a success message to the user
        await jsRuntime.InvokeVoidAsync("alert", "Changes saved successfully!");
    }

    //private async Task SaveChangesAsync()
    //{
    //    var passwordElement = await jsRuntime.InvokeAsync<ElementReference>("document.getElementById", "password");
    //    var passwordValue = await jsRuntime.InvokeAsync<string>("eval", $"document.getElementById('{passwordElement.Id}').value");

    //    var countryElement = await jsRuntime.InvokeAsync<ElementReference>("document.getElementById", "country");
    //    var countryValue = await jsRuntime.InvokeAsync<string>("eval", $"document.getElementById('{countryElement.Id}').value");

        
    //}

    //private async Task SaveChangesAsync()
    //{
    //    var password = await jsRuntime.InvokeAsync<ElementReference>("document.getElementById", "password");
    //    var country = await jsRuntime.InvokeAsync<ElementReference>("document.getElementById", "country");

    //}

}
