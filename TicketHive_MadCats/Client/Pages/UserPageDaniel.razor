@using Microsoft.AspNetCore.Authorization;
@using TicketHive_MadCats.Shared.Models;
@using TicketHive_MadCats.Shared.Statics;

@page "/Userpage"
@attribute [Authorize]

@inject AuthenticationStateProvider injAuthStateProvider
@inject HttpClient injHttpClient
@inject NavigationManager injNavMan

@if (true)
{
    <EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
@*        <ValidationSummary />
*@
        <div class="form-group">
            <label for="password">New Password:</label>
            <InputText id="password" class="form-control" @bind-Value="@updateModel.Password" />
            <ValidationMessage For="@(() => updateModel.Password)" />

            <InputSelect id="select" class="form-control" @bind-Value="@updateModel.Country">
                @foreach(string country in countries)
                {
                    <option value="@country">@country</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => updateModel.Country)" />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}
else
{
    <h3>Checking user credentials...</h3>
}

@code {
    // Injected properties
    [Inject]
    AuthenticationStateProvider authStateProvider { get; set; } = null!;
    [Inject]
    HttpClient httpClient { get; set; } = null!;
    [Inject]
    NavigationManager navMan { get; set; } = null!;

    // Model to be sent on valid form
    UpdateUserModel updateModel = new();

    // Variables for static use
    public List<string> countries = CountriesAndCodes.getListOfCountries;

    // Variables for dynamic use
    string newPassword = "";
    string newCountry = "";

    // Sets userName to logged in users username
    protected override async Task OnInitializedAsync()
    {
        var state = await authStateProvider.GetAuthenticationStateAsync();
        var user = state.User;

        if(user == null)
        {
            navMan.NavigateTo("/Index");
        }

        // No idea why warning isnt suppressed
        updateModel.Username = user.Identity.Name;
    }

    public void HandleValidSubmit()
    {
        
    }
}
