@page "/BookingPage"
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using TicketHive_MadCats.Shared.ViewModels;
@inject HttpClient injectedClient
@inject NavigationManager navMan
@attribute [Authorize]



<body>
    <h3>BookingPage</h3>
    <div>
        <label>Search for events:</label>
        <input type="text" @oninput="FilterEvent" />
        <button @onclick="FilterByHighestPrice">Filter by highest price</button>
        <button @onclick="FilterByLowestPrice">Filter by lowest price</button>
    </div>



    <div class="row text-center justify-content-center">
        @if (events != null)
        {
            foreach (var events in events)
            {
                // Deser events.imagesrcs till list<string>
                List<string>? listOfPaths = DeserializeImageSrcs(events.ImageSrcs);

                <div class="col-3 border border-2 border-dark m-2 p-2">
                    <a href="/EventPage/@events.Id">
                        <h3>@events.Name</h3>
                    </a>
                    @*Ändra priset till landets egna valuta*@
                    <p>@events.TicketPrice kr </p>
                    <p>@events.Date</p>
                    <em>@events.Location</em>
                    <br>
                    @foreach (string path in listOfPaths)
                    {
                        <img src=@path width="150" height="150" style="margin: 5px" />
                    }

                    @if (events.BookedTickets >= events.MaxTickets)
                    {
                        <br />
                        <em class="color text-danger" style="font-size: 18px">  Event is fully booked!</em>
                        <br />
                    }

                </div>
            }
        }
        else
        {
            <h3>Loading events... </h3>
        }
    </div>
</body>

<style>
    html, body {
        background-color: #F0F0F0;
        color: #305076;
    }
</style>
@code {
    private List<EventViewModel>? allEvents = new();
    private List<EventViewModel>? events = new();
    public EventViewModel? Event;
    public List<string> ImgPaths;
    // HttpClient codeClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        allEvents = await GetAllEvents();
        events = allEvents;
        //DeserializeImgs();
    }

    private void FilterByLowestPrice()
    {
        events = allEvents!.Where(p => p.TicketPrice > 1)
                           .OrderBy(p => p.TicketPrice)
                           .ToList();
    }
    private void FilterByHighestPrice()
    {
        events = allEvents!.Where(p => p.TicketPrice >1)
                           .OrderByDescending(p => p.TicketPrice)
                           .ToList();
    }


    private void FilterEvent(ChangeEventArgs e)
    {
        events = allEvents!.Where(p =>
            p.Name!.ToLower().Contains(e.Value!.ToString()!.ToLower()) |
            p.Location.ToLower().Contains(e.Value!.ToString()!.ToLower()) |
            p.EventType.ToLower().Contains(e.Value!.ToString()!.ToLower()) |
            p.Date.ToString().Contains(e.Value!.ToString()) |
            p.TicketPrice.ToString().Contains(e.Value!.ToString())
            ).ToList();

    }

    public async Task<List<EventViewModel>> GetAllEvents()
    {
        var response = await injectedClient.GetAsync("api/Events");
        var statusCode = response.StatusCode;
        if (statusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await response.Content.ReadAsStringAsync();
            List<EventViewModel?> eventVM = JsonConvert.DeserializeObject<List<EventViewModel?>>(responseBody);
            return eventVM;
        }
        return null;
    }
    //public void DeserializeImgs()
    //{
    //    if (Event != null)
    //    {
    //        ImgPaths = JsonConvert.DeserializeObject<List<string>>(Event.ImageSrcs);
    //    }
    //}

    public List<string>? DeserializeImageSrcs(string imageSrcsString)
    {
        return JsonConvert.DeserializeObject<List<string>>(imageSrcsString);
    }
}

