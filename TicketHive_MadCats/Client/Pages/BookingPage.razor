@page "/BookingPage/{initialSearchWord?}"
@using BusinessLogic;
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using TicketHive_MadCats.Shared.ViewModels;
@inject HttpClient injectedClient
@inject NavigationManager navMan
@inject AuthenticationStateProvider injAuthProvider
@attribute [Authorize]



<body>
    <h3>BookingPage</h3>
    <div>
        <label>Search for events:</label>
        <input type="text" value="@initialSearchWord" @oninput="FilterEvent" />
        <button @onclick="FilterByHighestPrice">Filter by highest price</button>
        <button @onclick="FilterByLowestPrice">Filter by lowest price</button>
    </div>



    <div class="row text-center justify-content-center">
        @if (events != null)
        {
            foreach (var events in events)
            {
                // Deser events.imagesrcs till list<string>
                List<string>? listOfPaths = DeserializeImageSrcs(events.ImageSrcs);

                <div class="col-3 border border-2 border-dark m-2 p-2">
                    <a href="/EventPage/@events.Id">
                        <h3>@events.Name</h3>
                    </a>
                    <p>@events.EventType</p>
                    @*Ändra priset till landets egna valuta*@
                    <p>
                        @if(eventPrices != null)
                        {
                            <span>@eventPrices[events.Name]</span>
                        }
                        else
                        {
                            <span>@events.TicketPrice</span>
                        }
                        @convertCurrencyTo
                    </p>
                    <p>@events.Date</p>
                    <em>@events.Location</em>
                    <br>
                    @foreach (string path in listOfPaths)
                    {
                        if(path != "none")
                        {
                            <img src=@path width="150" height="150" style="margin: 5px" />
                        }
                    }

                    @if (events.BookedTickets >= events.MaxTickets)
                    {
                        <br />
                        <em class="color text-danger" style="font-size: 18px">  Event is fully booked!</em>
                        <br />
                    }

                </div>
            }
        }
        else
        {
            <h3>Loading events... </h3>
        }
    </div>
</body>

<style>
    html, body {
        background-color: #305076;
        color: #F0F0F0;
    }

    h1, h2, h3, a, p, label {
        color: #fbe89c;
    }
</style>
@code {

    private List<EventViewModel>? allEvents = new();
    private List<EventViewModel>? events = new();
    public EventViewModel? Event;
    public List<string> ImgPaths;

    string? username;
    string? country;
    string? convertCurrencyTo;

    [Inject]
    HttpClient codeClient { get; set; }
    [Inject]
    AuthenticationStateProvider authStateProvider { get; set; }

    [Parameter]
    public string? initialSearchWord { get; set; }

    Dictionary<string, double>? eventPrices;

    protected override async Task OnInitializedAsync()
    {
        allEvents = await GetAllEvents();
        events = allEvents;
    }

    protected override async Task OnParametersSetAsync()
    {
        var user = await authStateProvider.GetAuthenticationStateAsync();
        if (user != null)
        {
            username = user.User.Identity.Name;

            var response = await codeClient.GetAsync($"api/usersv2/{username}");
            var body = await response.Content.ReadAsStringAsync();
            country = body;

            if (country.Equals("United Kingdom")) convertCurrencyTo = "GBP";
            else if (country.Equals("Sweden")) convertCurrencyTo = "SEK";
            else convertCurrencyTo = "EUR";

            // Need to populate a dictionary with country price values
            if (!convertCurrencyTo.Equals("SEK"))
            {
                eventPrices = new();
                foreach (EventViewModel eventVM in allEvents)
                {
                    eventPrices.Add(eventVM.Name, await ConvertApiCaller.ConvertSekToCurrencyAsyncIntOnly(convertCurrencyTo, eventVM.TicketPrice));
                }
            }
        }

        if(initialSearchWord != null)
        {
            FilterEvent(new ChangeEventArgs() { Value = initialSearchWord });
        }
    }
    /// <summary>
    /// Added methods that Filtered by prices 
    /// </summary>
    private void FilterByLowestPrice()
    {
        events = allEvents!.Where(p => p.TicketPrice > 1)
                           .OrderBy(p => p.TicketPrice)
                           .ToList();
    }
    private void FilterByHighestPrice()
    {
        events = allEvents!.Where(p => p.TicketPrice >1)
                           .OrderByDescending(p => p.TicketPrice)
                           .ToList();
    }

    /// <summary>
    /// Added methods that Filtered by events
    /// </summary>
    private void FilterEvent(ChangeEventArgs e)
    {
        events = allEvents!.Where(p =>
            p.Name!.ToLower().Contains(e.Value!.ToString()!.ToLower()) |
            p.Location.ToLower().Contains(e.Value!.ToString()!.ToLower()) |
            p.EventType.ToLower().Contains(e.Value!.ToString()!.ToLower()) |
            p.Date.ToString().Contains(e.Value!.ToString()) |
            p.TicketPrice.ToString().Contains(e.Value!.ToString())
            ).ToList();

    }
    /// <summary>
    /// Getting all events from API
    /// </summary>
    /// <returns></returns>
    public async Task<List<EventViewModel>> GetAllEvents()
    {
        var response = await injectedClient.GetAsync("api/Events");
        var statusCode = response.StatusCode;
        if (statusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await response.Content.ReadAsStringAsync();
            List<EventViewModel?> eventVM = JsonConvert.DeserializeObject<List<EventViewModel?>>(responseBody);
            return eventVM;
        }
        return null;
    }


    public List<string>? DeserializeImageSrcs(string imageSrcsString)
    {
        return JsonConvert.DeserializeObject<List<string>>(imageSrcsString);
    }
}

