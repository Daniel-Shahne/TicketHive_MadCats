@page "/AdminView"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using TicketHive_MadCats.Client.Testers;
@using TicketHive_MadCats.Server.Testers;
@using TicketHive_MadCats.Shared.Models;
@using TicketHive_MadCats.Shared.ViewModels;
@inject HttpClient client
@inject NavigationManager navMan
@inject AuthenticationStateProvider authStateProvider

<h3>AdminView</h3>

@*<button @onclick="testEventEndpoints">Test all endpoints</button>

<br />
<label for="ticketDeleteNumberInput">Id of ticket to delete (0 if no deletion)</label>
<input id="ticketDeleteNumberInput" type="number" @bind="ticketToDelete"/>

<br />
<label for="testPostCheckbox">Test booking 2 tickets to event 1 (maxtickets 5)</label>
<input id="testPostCheckbox" type="checkbox" @bind="testPost" />

<div>Event API test result: @eventApiTestStatus</div>
<div>Tickets API test result: @ticketApiTestStatus</div>*@



<EditForm Model="@eventModel" OnValidSubmit="CreateEvent">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Event Name</label>
        <InputText @bind-Value="eventModel.Name" class="form-control"/>
    </div>
    <div>
        <label>Event Type</label>
        <InputText @bind-Value="eventModel.EventType" class="form-control" />
    </div>
    <div>
        <label>Ticket Price</label>
        <InputNumber @bind-Value="eventModel.TicketPrice" class="form-control" />
    </div>
    <div>
        <label>Event Location</label>
        <InputText @bind-Value="eventModel.Location" class="form-control" />
    </div>
    <div>
        <label>Event Date</label>
        <InputDate @bind-Value="eventModel.Date" class="form-control" />
    </div>
    <div>
        <label>Event Images</label>
        <InputText @bind-Value="eventModel.ImageSrcs" class="form-control" />
    </div>
    <div>
        <label>Max Capacity of Event</label>
        <InputNumber @bind-Value="eventModel.MaxTickets" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Create Event</button>
</EditForm>

<h3>@statusMessage</h3>


<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Date</th>
            <th>Location</th>
            <th>Ticket Price</th>
            <th>Max Tickets</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var evt in Events)
        {
            <tr>
                <td>@evt.Name</td>
                <td>@evt.EventType</td>
                <td>@evt.Date.ToShortDateString()</td>
                <td>@evt.Location</td>
                <td>@evt.TicketPrice</td>
                <td>@evt.MaxTickets</td>
                <td>
                    <button class="btn btn-danger" @onClick="() => @DeleteEvent(evt.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h3>@deleteStatusMessage</h3>



@code {
    
    
    @*// Injicerar både dessa för användning i ApiTesters
    [Inject]
    public HttpClient httpClient { get; set; }
    [Inject]
    public AuthenticationStateProvider authInCode { get; set; }

    // Binds to id of ticket to delete
    public int ticketToDelete { get; set; } = 0;

    // Binds to checking posting or not
    public bool testPost { get; set; } = false;

    // Används för att visa testernas status på UI't som en bool
    public bool? eventApiTestStatus = null;
    public bool? ticketApiTestStatus = null;

    // Testar alla endpoints med testers instanser
    public async Task testEventEndpoints()
    {
        EventApiTester eventTester = new(authInCode, httpClient);
        eventApiTestStatus = await eventTester.testEndpoints();

        TicketsApiTester ticketTester = new(authInCode, httpClient);
        ticketApiTestStatus = await ticketTester.testEndpoints(ticketToDelete, testPost);
    }*@
    // Injicerar både dessa för användning i ApiTesters

    [Inject]
    public HttpClient httpClient { get; set; }
    [Inject]
    public AuthenticationStateProvider authInCode { get; set; }


    private EventModel eventModel = new();
    private EventModel eventToDelete;
    private List<EventModel> Events = new();
    private string statusMessage = string.Empty;
    private string deleteStatusMessage = string.Empty;
    private bool confirmDeleteVisible = false;

    private async Task CreateEvent()
    {
        string modelToCreate = JsonConvert.SerializeObject(eventModel);

        var response = await httpClient.PostAsJsonAsync("api/events", modelToCreate);

        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Event created successfully!";
        }

        await EventsInList();
        eventModel = new EventModel();
    }

    protected override async Task OnInitializedAsync()
    {
        await EventsInList();
    }

    private async Task EventsInList()
    {
        Events = await httpClient.GetFromJsonAsync<List<EventModel>>("/api/events");
    }

    private async Task DeleteEvent(int id)
    {
        var response = await httpClient.DeleteAsync($"/api/events/{id}");

        if (response.IsSuccessStatusCode)
        {
            await EventsInList();
            deleteStatusMessage = "Deletion is a success.";
        }
        else
        {
            deleteStatusMessage = "Deletion was not a success.";
            return;
        }
    }



}
